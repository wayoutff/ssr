diff --git a/node_modules/@babel/plugin-transform-typescript/lib/index.js b/node_modules/@babel/plugin-transform-typescript/lib/index.js
index 0714c68..0ee3f66 100644
--- a/node_modules/@babel/plugin-transform-typescript/lib/index.js
+++ b/node_modules/@babel/plugin-transform-typescript/lib/index.js
@@ -151,67 +151,67 @@ var _default = (0, _helperPluginUtils.declare)((api, {
           }
         }
 
-        for (let stmt of path.get("body")) {
-          if (_core.types.isImportDeclaration(stmt)) {
-            if (stmt.node.importKind === "type") {
-              stmt.remove();
-              continue;
-            }
-
-            if (!onlyRemoveTypeImports) {
-              if (stmt.node.specifiers.length === 0) {
-                continue;
-              }
-
-              let allElided = true;
-              const importsToRemove = [];
-
-              for (const specifier of stmt.node.specifiers) {
-                const binding = stmt.scope.getBinding(specifier.local.name);
-
-                if (binding && isImportTypeOnly({
-                  binding,
-                  programPath: path,
-                  jsxPragma: fileJsxPragma || jsxPragma
-                })) {
-                  importsToRemove.push(binding.path);
-                } else {
-                  allElided = false;
-                }
-              }
-
-              if (allElided) {
-                stmt.remove();
-              } else {
-                for (const importPath of importsToRemove) {
-                  importPath.remove();
-                }
-              }
-            }
-
-            continue;
-          }
-
-          if (stmt.isExportDeclaration()) {
-            stmt = stmt.get("declaration");
-          }
-
-          if (stmt.isVariableDeclaration({
-            declare: true
-          })) {
-            for (const name of Object.keys(stmt.getBindingIdentifiers())) {
-              registerGlobalType(path.scope, name);
-            }
-          } else if (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({
-            declare: true
-          }) || stmt.isTSEnumDeclaration({
-            declare: true
-          }) || stmt.isTSModuleDeclaration({
-            declare: true
-          }) && stmt.get("id").isIdentifier()) {
-            registerGlobalType(path.scope, stmt.node.id.name);
-          }
-        }
+        // for (let stmt of path.get("body")) {
+        //   if (_core.types.isImportDeclaration(stmt)) {
+        //     if (stmt.node.importKind === "type") {
+        //       stmt.remove();
+        //       continue;
+        //     }
+
+        //     if (!onlyRemoveTypeImports) {
+        //       if (stmt.node.specifiers.length === 0) {
+        //         continue;
+        //       }
+
+        //       let allElided = true;
+        //       const importsToRemove = [];
+
+        //       for (const specifier of stmt.node.specifiers) {
+        //         const binding = stmt.scope.getBinding(specifier.local.name);
+
+        //         if (binding && isImportTypeOnly({
+        //           binding,
+        //           programPath: path,
+        //           jsxPragma: fileJsxPragma || jsxPragma
+        //         })) {
+        //           importsToRemove.push(binding.path);
+        //         } else {
+        //           allElided = false;
+        //         }
+        //       }
+
+        //       if (allElided) {
+        //         stmt.remove();
+        //       } else {
+        //         for (const importPath of importsToRemove) {
+        //           importPath.remove();
+        //         }
+        //       }
+        //     }
+
+        //     continue;
+        //   }
+
+        //   if (stmt.isExportDeclaration()) {
+        //     stmt = stmt.get("declaration");
+        //   }
+
+        //   if (stmt.isVariableDeclaration({
+        //     declare: true
+        //   })) {
+        //     for (const name of Object.keys(stmt.getBindingIdentifiers())) {
+        //       registerGlobalType(path.scope, name);
+        //     }
+        //   } else if (stmt.isTSTypeAliasDeclaration() || stmt.isTSDeclareFunction() || stmt.isTSInterfaceDeclaration() || stmt.isClassDeclaration({
+        //     declare: true
+        //   }) || stmt.isTSEnumDeclaration({
+        //     declare: true
+        //   }) || stmt.isTSModuleDeclaration({
+        //     declare: true
+        //   }) && stmt.get("id").isIdentifier()) {
+        //     registerGlobalType(path.scope, stmt.node.id.name);
+        //   }
+        // }
       },
 
       ExportNamedDeclaration(path) {
